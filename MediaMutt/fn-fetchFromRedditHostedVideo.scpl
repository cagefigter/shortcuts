Comment "..:: fetchFromRedditHostedVideo ::.."
GetVariable v:function
If Equals "fetchFromRedditHostedVideo"
	@dbgAlert "Entered fetchFromRedditHostedVideo"

	Comment
	|Took some ideas from u/back1n7ime's Reddit Video Downloader
	|specially adding audio stream to the video

	GetVariable v:argv:post -> v:ref_post

	//GetVariable v:argv:"post.secure_media"
	GetDictionaryValue get="Value" key="secure_media"
	Count Items
	If Equals 0
		GetVariable v:argv:post
		GetDictionaryValue get="Value" key="crosspost_parent_list" -> v:cross_posts
		Count Items
		If Equals 0
			Nothing
			@dbgAlert "Exited fetchFromRedditHostedVideo, returning Nothing"
		End
		@dbgAlert "It's a cross-post"
		GetVariable v:cross_posts
		GetItemFromList "First Item" -> v:ref_post
		@dbgAlert "Reference Post - \(v:ref_post)"
	End

	@dbgAlert "getting video url"
	GetVariable v:ref_post
	GetDictionaryValue key="secure_media.reddit_video" -> v:video
	GetDictionaryValue get="Value" key="fallback_url" -> v:fallback_url

	@dbgAlert "video node = \(v:video)"

	@dbgAlert "video url = \(v:fallback_url)"
	GetVariable v:fallback_url
	GetContentsOfURL
	SetName "video_file.gif" -> v:video_file
	SetVariable v:return

	# if not gif, download audio
	GetVariable v:video.is_gif
	If Equals 1
	Otherwise
		GetVariable v:video_file
		SetName "video_file.mp4"
		SetVariable v:video_file

		URL "\(v:ref_post.url)/audio" -> v:audio_url
		@dbgAlert "audio url = \(v:audio_url)"
		GetHeadersOfURL
		GetDictionaryValue get="Value" key="Content-Type"
		If Equals "video/mp4"
			@dbgAlert "Downloading audio"
			GetVariable v:audio_url
			GetContentsOfURL
			SetName "audio_file.mp3" -> v:audio_file


			#@addAudioToVideo v:video_file v:audio_file
			URL "http://www.fileconverto.com/add-music-to-video/"
			GetContentsOfUrl a{
				advanced=true
				method="POST"
				headers=false
				requestbody="Form"
				formvalues={
					<file> videofile: v:video_file,
					<file> audiofile: v:audio_file,
					submitfile: ""
				}
			}

			SetName "src.txt"
			SplitText separator="Custom" custom="Completed:"
			GetItemfromList "Last Item"
			SplitText separator="Custom" custom=">Download"
			GetItemFromList "First Item"			
			@dbgQuickLook
			MatchText pattern="(?m)(?:href=\")(http[^\\\"]+)" caseSensitive=false -> v:matches
			GetGroupfromMatchedText get="Group At Index" groupIndex=1 -> v:url
			URL "\(v:url)" -> v:media_url
			@dbgAlert v:media_url
			GetContentsOfURL -> v:return
		End
	End
	@dbgAlert "Exited fetchFromRedditHostedVideo"
	GetVariable v:return
	ExitShortcut
End