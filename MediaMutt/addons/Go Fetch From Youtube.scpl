
# load fallback actions
@import "../../lib/fallback.scpl"

@icon "crowd"
@color "blue"
@ShowInShareSheet true

SetVariable v:argv

@set debug true
@set mock false
@import "../../lib/helpers.scpl"

Comment "..:: Metadata ::.."
Dictionary {
    shortcut    : "Go Fetch From Youtube",
    author      : "@supermamon",
    version     : "1.0.1",
    settings    : {
        updater : {
            ID: 3187
        },
    },
    changes     : {
        "v1.0.0": "Initial release"
    }
} -> mv:meta
GetVariable mv:meta:shortcut -> v:self
GetVariable mv:meta:settings -> v:opt

Dictionary items={"key":"val"}
GetType -> v:lDictionary

#  function detection
GetVariable v:argv
GetType
If Equals v:lDictionary
    GetVariable v:argv:fn -> v:function
Otherwise
    @call {fn:main}
    ExitShortcut
End

# function list
GetVariable v:function
If Equals "main"
    @call {
        fn          : checkForUpdate,
        name        : v:self,
        id          : v:opt:"updater.ID",
        version     : mv:meta:version,
        noUpdAlert  : "show",
    }
    Text -> mv:msg
    |This shortcut is an addon to Media Mutt.
    |Download Media Mutt and register
    |this addon.
    ShowAlert title=v:self message=mv:msg
    ExitShortcut
End
If Equals "register"
    GetVariable v:self
    ExitShortcut
End
If Equals "canProcessURL"
    @dbgAlert "Entered [\(v:self)] canProcessURL with \(v:argv:url)"

    List
    |^https:\\/\\/youtu\\.be\\/[a-zA-Z0-9]+
    |^https:\\/\\/youtube\\.com\\/watch\\?v=[a-zA-Z0-9-]+.*
    RepeatwithEach
        @dbgAlert "matching \(v:"Repeat Item")"
        GetVariable v:argv:url
        MatchText pattern=v:"Repeat Item" caseSensitive=false -> v:matches
        Comment "Return 1 if addon can handle the url, 0 otherwise"
        Count Items
        If "Is Greater Than" 0
            Number 1
        Otherwise
            Number 0
        End -> mv:this_match
        @dbgAlert "matched? \(mv:this_match)"
    End
    CalculateStatistics "Sum"
    If "Is Greater Than" 0
        Number 1
    Otherwise
        Number 0
    End -> mv:supported
    @dbgAlert "Exiting [\(v:self)] canProcessURL returning \(mv:supported)"
    ExitShortcut
End
If Equals "fetchMedia"
    @dbgAlert "Entered fetchMedia with \(v:argv:url)"
    @callExt "Media Mutt" {fn:showMessage message="[\(v:self)] Inspecting url"}


    GetVariable v:argv:url
    Expandurl
    GetComponentOfUrl Query
    GetDictionaryFromInput -> v:query
    GetVariable v:query:v
    SetVariable "video_id"
    Url "https://youtube.com/get_video_info?video_id=\(v:video_id)&el=detailpage&ps=default&eurl=&gl=US&hl=en"
    GetContentsOfUrl advanced=false headers=false
    GetDictionaryfromInput 
    SetVariable "video_info"

    @dbgViewWithJayson

    GetVariable v:video_info:title
    ReplaceText findtext="+" replacewith=" "
    SetVariable "yt_video_title"


    Dictionary {
        "_order":"38,37,85,96,22,84,95,59,78,83,94,18,82,93,92,132,91,151",
        "38":"4K",
        "37":"1080p",
        "85":"1080p",
        "96":"1080p",
        "22":"720p",
        "84":"720p",
        "95":"720p",
        "59":"480p",
        "78":"480p",
        "83":"480p",
        "94":"480p",
        "18":"360p",
        "82":"360p",
        "93":"360p",
        "92":"240p",
       "132":"240p",
        "91":"144p",
       "151":"144p"
    }
    SetVariable "itags"

    GetVariable v:video_info
    GetDictionaryValue key="url_encoded_fmt_stream_map"
    SplitText separator="Custom" custom=","
    RepeatWithEach
        GetDictionaryFromInput
        SetVariable v:stream

        @dbgViewWithJayson

        GetVariable v:itags:"_order"
        SplitText separator=Custom custom=","

        # If itag is in the list
        If input="Equals" value=v:stream:itag
            @dbgAlert "matched \(v:stream:itag)"
            GetVariable v:itags
            GetDictionaryValue get=Value key=v:stream:itag -> v:quality_name

            GetVariable v:stream.type
            URLEncode Encode -> mv:s_type

            GetVariable v:stream.s
            URLEncode Encode -> mv:s_sif

            Text "\(v:stream.url)&signature=\(mv:s_sig)&type=\(mv:s_type)&title=\(v:video_info:title)"
            SetVariable v:stream_url
            @dbgAlert "stream url -> \(v:stream_url)"
            SetName "\(v:quality_name) (itag_\(v:stream:itag))"
            AddToVariable v:stream_options

        End
    End

    # get highest quality
    GetVariable v:stream_options
    @dbgQuicklook
    #GetItemFromList get="First Item"
    ChooseFromList -> mv:media_url
    CopytoClipboard localOnly=false
    @dbgAlert mv:media_url


    GetContentsOfUrl
    SetName v:yt_video_title

    @dbgAlert "Exited fetchFromYoutube"
    ExitShortcut
End

@import "../../lib/checkForUpdate-fn.scpl"
#
ShowAlert title=v:self message="(\(v:self)) Invalid function call - \(v:function)" showCancelButton=false
Nothing
ExitShortcut