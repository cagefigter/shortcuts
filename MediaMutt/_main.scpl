Comment `main function ::..
`
GetVariable v:function
If Equals "main"
  @dbgAlert "Entered main"

  # validate that there is an input
  Number 0 -> v:hasUrl
  Number 0 -> v:canDownload


  Text "\(v:argv:url)"
  Count Characters
  If "Is Greater Than" 0
    Number 1 -> v:hasUrl
  End
  @dbgAlert "Has URL = \(v:hasUrl)"


  # if no input passed, don't add a download menu
  GetVariable v:hasUrl
  If Equals 0

    Text "" -> v:dl_menu_item
    # Exit if it's in test mode and no input
    GetVariable v:opt.TestMode
    If Equals 1
      Nothing
      ExitShortcut
    End

  Otherwise

    # detect if input is supported by built-in handlers
    Dictionary {
        "DIRECT_MEDIA_URL" : [
            "^https:\\/\\/[iv]\\.redd\\.it\\/[a-z0-9]+\\.[a-z]{3,}",
        ],
        "REDDIT_POST": [
            "^https:\\/\\/(www\\.)*reddit\\.com\\/r\\/\\w+\\/comments\\/\\w+\\/\\w+",
            "^https:\\/\\/v\\.reddit\\.com\\/[a-z0-9]+",
            "^https:\\/\\/v\\.redd\\.it\\/[a-z0-9]+",
        ],
        "INSTAGRAM_POST": [
            ".+(www\\.)*instagram\\.com[\\w\\.\\\\/-]*\\/p\\/",
            ".+(www\\.)*instagram\\.com\\/tv\\/[a-zA-Z0-0]+",
        ],
        "YOUTUBE_VIDEO" : [
            ".+youtu\\.be\\/[a-zA-Z0-9]+",
            ".+youtube\\.com\\/watch\\?v=[a-zA-Z0-9-]+.*"
        ],
        "GFYCAT_VIDEO" : [
            "^https:\\/\\/gfycat\\.com\\/[\\w]{3,}[\\w-]*"
        ],
        "IMGUR_GIFV" : [
            "^http(s*):\\/\\/i\\.imgur\\.com\\/[a-zA-Z0-9]+\\.gifv(\\?*.*)$"
        ],
        "IMGUR_DIRECT" : [
            "^https:\\/\\/i\\.imgur\\.com\\/[a-zA-Z0-9]+\\.(?!gifv)[a-zA-Z0-9]+(\\?*.*)$"
            "^https:\\/\\/imgur\\.com\\/[a-zA-Z0-9]+\\.(?!gifv)[a-zA-Z0-9]+(\\?*.*)$",
        ],
        "IMGUR_POST" : [
            "^http(s*):\\/\\/imgur\\.com\\/(a\\/)*[0-9a-zA-Z]+(\\?*.*)$"
        ],
        "STREAMABLE_POST" : [
            "^https:\\/\\/streamable\\.com\\/[a-z0-9]{5,}(\\?*.*)$"
        ]
    } -> mv:detection_list

    GetDictionaryValue get="All Keys"
    RepeatWithEach # type
        SetVariable v:input_type
        GetVariable mv:detection_list
        GetDictionaryValue get="Value" key=v:input_type
        RepeatWithEach # pattern
            SetVariable v:pattern
            GetVariable v:argv:url
            MatchText pattern=v:pattern casesensitive=false
            Count Items
            If "Is Greater Than" 0
                @dbgAlert "Exiting detectInput\nreturn\n\(v:input_type)"
                Text "\(v:input_type)" -> v:found_internal_handler
                #ExitShortcut
            End
        End
    End



    Text "\(v:found_internal_handler)"
    Count Characters
    If "Is Greater Than" 0
      GetVariable v:found_internal_handler -> v:return
    Otherwise

      # detect if input is supported by addons

      @dbgAlert "Assume unsupported before checking with addons"
      Text "UNSUPPORTED" -> v:return

      # addons here
      @call {fn:getAddonsList}
      SetVariable v:addons

      # loop through addons and check if addon can handle
      RepeatwithEach
          @dbgAlert "Checking with \(v:"Repeat Item")"
          @callExt v:"Repeat Item" {fn:canProcessURL, url:v:argv:url}
          If Equals 1
              GetVariable v:"Repeat Item"
              AddToVariable v:ext_addons
          End
      End

      # choose the addon that will handle
      GetVariable v:ext_addons
      Count Items
      If "Is Greater Than" 1
          GetVariable v:ext_addons
          ChoosefromList prompt="Fetch using" selectMultiple=false -> mv:chosen_addon
          Text "\(mv:chosen_addon)" -> v:ext_addons
      End
      GetVariable v:ext_addons
      Count Items
      If "Is Greater Than" 0
        Text "EXT_\(v:ext_addons)" -> v:return
      End


    End

    Text "\(v:return)" -> v:input_type

    If Equals "UNSUPPORTED"


      Text -> v:dl_menu_item
      | { "caption":"\(v:lang.UNSUPPORTED_URL)", "subtitle":"\(v:argv:url)", "value":"do-exit", "icon":"\(mv:icons.ban)" },

      GetVariable v:opt.TestMode
      If Equals 1
        Nothing
        ExitShortcut
      End


    Otherwise
      # if it's supported and is on test mode,
      # fetch the data and exit
      GetVariable v:opt.TestMode
      If Equals 1
        @call {fn:fetchMedia, type:v:input_type, url:v:argv:url}
        ExitShortcut
      End

      # otherwise, update the menu item
      Text -> v:dl_menu_item
      | { "caption":"\(v:lang.DOWNLOAD)", "subtitle":"\(v:argv:url)", "value":"do-fetch", "icon":"\(mv:icons.download)" },

      Number 1 -> v:canDownload

    End

  End

  # check for update
  Number 0 -> v:hasUpdate
  @call {
    fn          : getUpdates,
    name        : v:self,
    id          : v:opt:"updater.ID",
    version     : mv:meta:version,
    interval    : v:userOpts.UpdateInterval,
    lastupdate  : v:userOpts.sysLastUpdateCheck,
  }
  GetDictionaryfromInput
  SetVariable v:upd
  GetVariable v:upd.hasUpdate
  # if update is available, change the menu item
  If Equals "no"
    Text
    |{ "caption":"\(v:lang.CHECK4UPDATES)", "subtitle":"\(v:lang.CHECK4UPDATES_SUBTTL)", "value":"do-cfu", "icon":"\(mv:icons.bullhorn)"},
  Otherwise
    Number 1 -> v:hasUpdate
    Text
    |{ "caption":"\(v:upd.updateMessage)",  "subtitle":"\(v:upd.localVersion) -> \(v:upd.latestVersion)", "value":"do-cfu", "icon":"\(mv:icons.bullhorn)"},
  End -> mv:updateEntry

  GetVariable v:userOpts.SaveTo
  If Equals "saveto-photos"
    Text ""
  Otherwise
    Text `{ "caption":"\(v:lang.DOWNLOADS)",  "subtitle":"\(v:lang:DOWNLOADS_SUBTTL)",  "value":"show-downloads", "icon":"\(mv:icons.folder)" },`
  End -> mv:download_dir_menu


  # Standard Menu
  Text -> v:menu_txt
    |{
    |"fn": "chooseFromVcardMenu",
    |"caption": "\(v:self) v\(mv:meta.version)",
    |"menu_items": [
    | \(v:dl_menu_item)
    | \(mv:download_dir_menu)
    | { "caption":"\(v:lang.SETTINGS)",   "subtitle":"\(v:lang:SETTINGS_SUBTTL)",   "value":"show-settings",  "icon":"\(mv:icons.cog)" },
    | { "caption":"\(v:lang.ADDONS)",     "subtitle":"\(v:lang.ADDONS_SUBTTL)",     "value":"manage-addons",  "icon":"\(mv:icons."puzzle-piece")" },
    | \(mv:updateEntry)
    | { "caption":"\(v:lang.ABOUT)",      "subtitle":"\(v:lang.ABOUT) \(v:self)",   "value":"do-about",       "icon":"\(mv:icons."info-circle")"},
    | { "caption":"\(v:lang.EXIT)",       "subtitle":"\(v:lang.EXIT_SUBTTL)",       "value":"do-exit",        "icon":"\(mv:icons."arrow-alt-circle-left")"}
    | ]
    |}

  GetVariable v:userOpts.DownloadImmediately
  # show mini menu it DownloadImmediately is on and update is available
  If Equals 1

    GetVariable v:hasUpdate
    If Equals 1

      Text -> v:menu_txt
          |{
          |"fn": "chooseFromVcardMenu",
          |"caption": "\(v:self) v\(mv:meta.version)",
          |"menu_items": [
          | \(v:dl_menu_item)
          | \(mv:updateEntry)
          | { "caption":"\(v:lang.EXIT)",       "subtitle":"\(v:lang.EXIT_SUBTTL)",       "value":"do-exit", "icon":"\(mv:icons."arrow-alt-circle-left")"}
          | ]
          |}

    Otherwise

      GetVariable v:canDownload
      If Equals 1
        @call {fn:fetchMedia, type:v:input_type, url:v:argv:url}
        ExitShortcut
      End
    End
  End

  @dbgAlert " menu_txt \n \(v:menu_txt)"
  GetVariable v:menu_txt
  #QuickLook
  #RunShortcut shortcut="View With Jayson" showWhileRunning=false
  GetDictionaryFromInput -> mv:menu
  @dbgAlert " menu_dict \n \(mv:menu)"

  RunShortcut shortcut=v:self false -> mv:chosen_item
  GetDictionaryValue get="Value" key="value"
  SetVariable v:menu_action
  If Equals "do-fetch"
    @call {fn:fetchMedia, type:v:input_type, url:v:argv:url}
    #@call{fn:main}
    ExitShortcut
  End
  GetVariable v:menu_action
  If Equals "do-exit"
    ExitShortcut
  End
  GetVariable v:menu_action
  If Equals "do-cfu"
    @call {
        fn          : checkForUpdate,
        name        : v:self,
        id          : v:opt:"updater.ID",
        version     : mv:meta:version,
        interval    : v:userOpts.UpdateInterval,
        lastUpdate  : v:userOpts.sysLastUpdateCheck,
    }
    Nothing
  End
  GetVariable v:menu_action
  If Equals "show-settings"
    @call{fn:showSettings}
    @call{fn:main}
    Nothing
  End
  GetVariable v:menu_action
  If Equals "manage-addons"
    @call{fn:manageAddons }
    @call{fn:main}
    Nothing
  End
  GetVariable v:menu_action
  If Equals "show-downloads"
    URL "shareddocuments:///private/var/mobile/Library/Mobile%20Documents/iCloud~is~workflow~my~workflows/Documents/\(v:userOpts.DownloadFolder)"
    OpenURLs
    ExitShortcut

    #@call{fn:showDownloads }
    #@call{fn:main}
    Nothing
  End
  GetVariable v:menu_action
  If Equals "do-about"
    Text -> mv:about
    |\(v:self) \(mv:meta:version)
    |Created by: \(mv:meta:author)
    |_____________________
    |
    | Youtube - Instagram - Reddit
    | Imgur - Gfycat - Streamable
    | More!
    |_____________________
    |
    |Credits
    |
    |** https://scpl.dev **
    |
    |Icons from: https://fontawesome.com/
    | courtesy of @atnbueno over at Discord
    |
    |Youtube Download: https://tyrrrz.me/Blog/Reverse-engineering-YouTube
    |
    |Audio/Video merging: http://www.fileconverto.com/add-music-to-video/
    |
    |Translations:
    |Russian: @Devilmachine
    |Portuguese: @D3W10
    |Spanish: iGotTech
    |To contribute translations, message @supermamon.
    ShowAlert title="" message=mv:about showCancelButton=false
    @call{fn:main}
    Nothing
  End
  @dbgAlert "Exited main"
  ExitShortcut
End
