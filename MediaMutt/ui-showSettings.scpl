GetVariable v:function
If Equals "showSettings"
    #ShowAlert title="Settings here" message=""

    Dictionary {
        SaveTo: {
            "always-ask": "\(v:lang.SAVETO_PROMPT)",
            "saveto-files": "\(v:lang.SAVETO_FILES)",
            "saveto-photos": "\(v:lang.SAVETO_PHOTOS)",
        },
    } -> v:opt_lists


    GetVariable v:opt_lists.SaveTo
    GetDictionaryValue get="Value" key=v:userOpts:SaveTo -> mv:SaveToSubttl

    Dictionary {
        ShowAlerts: {
            type        : "toggle",
            icon        : "toggle",
            caption     : v:lang.SHOW_ALERTS,
            description : v:lang.SHOW_ALERTS_SUBTTL,
        },
        ViewBeforeSave: {
            type        : "toggle",
            icon        : "toggle",
            caption     : v:lang.PREVIEWB4SAVE,
            description : v:lang.PREVIEWB4SAVE_SUBTTL,
        },
        DownloadImmediately: {
            type        : "toggle",
            icon        : "toggle",
            caption     : v:lang.DLOADIMMED,
            description : v:lang.DLOADIMMED_SUBTTL,
        },
        DownloadFolder: {
            type        : "text",
            icon        : "folder",
            caption     : v:lang.DOWNLOAD_DIR,
            description : v:userOpts:DownloadFolder,
        },
        SaveTo: {
            type        : "list",
            icon        : "save",
            list        : v:opt_lists.SaveTo
            caption     : v:lang.SAVETO,
            description : mv:SaveToSubttl,
        },
        UpdateInterval: {
            type        : "number",
            icon        : "clock",
            caption     : v:lang.UPDATEFREQ,
            description : v:lang.UPDATEFREQ_SUBTTL,
        },
        Language: {
            type        : "lang-list",
            icon        : "atlas",
            caption     : "Language",
            description : v:userOpts:Language
        },
    } -> v:opt_map


    List [
        "ShowAlerts",
        "ViewBeforeSave",
        "DownloadImmediately",
        "SaveTo",
        "DownloadFolder",
        "UpdateInterval",
        "Language",
    ] -> mv:sysPrefOrder
    RepeatwithEach

        # this will hold the option name
        SetVariable v:option_name

        # get mapping information for that option
        GetVariable v:opt_map
        GetDictionaryValue get="Value" key=v:option_name -> mv:mapped_item
        Count Items
        # show only if mapping is defined
        If "Is Greater Than" 0


            Text "\(mv:mapped_item.caption)" -> v:caption
            Text "\(mv:mapped_item.description)" -> v:optSubtitle
            GetVariable mv:icons
            GetDictionaryValue get="Value" key=mv:mapped_item.icon -> v:optIcon

            GetVariable v:userOpts
            GetDictionaryValue get="Value" key=v:option_name -> v:optState

            Text "\(mv:mapped_item.type)" -> v:mapped_item_type
            # on/off type
            If Equals "toggle"

                GetVariable v:userOpts
                GetDictionaryValue get="Value" key=v:option_name
                If Equals 1
                    Text "on"
                Otherwise
                    Text "off"
                End -> v:optState

                GetVariable mv:icons
                GetDictionaryValue get="Value" key="toggle-\(v:optState)" -> v:optIcon

                Nothing
            End

            // text type
            GetVariable v:mapped_item_type
            If Equals "text"
                Getvariable mv:mapped_item.description -> v:optState
                Nothing
            End

            Dictionary {
                "caption" : v:caption,
                "subtitle": v:optSubtitle,
                "icon"    : v:optIcon,
                "value"   : {
                    option: v:option_name,
                    state : v:optState,
                    type  : v:mapped_item_type,
                    list  : mv:mapped_item.list
                }
            }
            AddToVariable v:options_list
        End
    End

    # add a reset settings item
    Dictionary {
        "caption" : v:lang.RESET,
        "subtitle": v:lang.RESET_SUBTTL,
        "icon"    : mv:icons:history,
        "value"   : {
            option: "reset",
            type  : "reset"
        },
    }
    AddToVariable v:options_list

    # add an exit item
    Dictionary {
        "caption" : v:lang.DONE,
        "subtitle": v:lang.DONE_SUBTTL,
        "icon"    : mv:icons:"arrow-alt-circle-left",
        "value"   : {
            option: "done",
            type  : "exit"
        },
    }
    AddToVariable v:options_list

    # display the menu
    Dictionary {
        fn:"chooseFromVcardMenu",
        caption: "Tap the option to change."
    }
    SetDictionaryValue key="menu_items" value=v:options_list
    RunShortcut shortcut=v:self false -> mv:chosen_item


    Dictionary {
        <bool> on   :false,
        <bool> off  :true,
    } -> mv:switcher


    GetVariable mv:chosen_item
    GetDictionaryValue get="Value" key="value"
    GetDictionaryfromInput -> v:chosen_value
    #@dbgViewWithJayson

    GetVariable v:chosen_value
    GetDictionaryValue get="Value" key="type" -> v:value_type

    @dbgAlert "value_type = \(v:value_type)"

    If Equals "toggle"

        GetVariable mv:switcher
        GetDictionaryValue get="Value" key=v:chosen_value.state -> v:newState

        GetVariable v:userOpts
        SetDictionaryValue key=v:chosen_value.option value=v:newState
        SetName v:opt:"storage.file"
        SaveFile a{
            service="iCloud Drive"
            askwheretosave=false
            destinationpath="\(v:opt:"storage.cfgdir")/"
            overwriteiffileexists=true
        }
        Nothing

    End
    GetVariable v:value_type
    If Equals "text"
        AskforInput question=mv:chosen_item.caption defaultAnswer=v:chosen_value.state inputType="Text" -> v:newState

        GetVariable v:userOpts
        SetDictionaryValue key=v:chosen_value.option value=v:newState
        SetName v:opt:"storage.file"
        SaveFile a{
            service="iCloud Drive"
            askwheretosave=false
            destinationpath="\(v:opt:"storage.cfgdir")/"
            overwriteiffileexists=true
        }

        GetVariable v:chosen_value.option
        If Equals "DownloadFolder"
            GetVariable v:newState
            If Equals v:userOpts.DownloadFolder
            Otherwise

                CreateFolder service="iCloud Drive" path="\(v:newState)/"
                GetFile service="iCloud Drive" showDocumentPicker=false  filePath="\(v:userOpts.DownloadFolder)/" errorIfNotFound=false
                RepeatwithEach
                    SaveFile service="iCloud Drive" askWheretoSave=false destinationPath="\(v:newState)/" overwriteIfFileExists=true
                End
                GetFile service="iCloud Drive" showDocumentPicker=false  filePath="\(v:userOpts.DownloadFolder)/" errorIfNotFound=false
                RepeatwithEach
                    DeleteFiles false
                end


                GetVariable v:lang.MSG_FILES_MOVED
                ReplaceText (
                    findText="{DOWNLOAD_DIR}",
                    replaceWith=v:newState,
                    caseSensitive=true,
                    regularExpression=false
                ) -> mv:msg_files_moved
                @call {fn:showMessage, message:mv:msg_files_moved}
            End

        End

        Nothing

    End
    GetVariable v:value_type
    If Equals "lang-list"

        URL v:opt.langs_web_lst
        GetContentsofURL
        GetDictionaryValue get="Value" key="translations" -> v:langs_available_online

        ChoosefromList (
            prompt="\(mv:chosen_item.caption)",
            selectMultiple=false,
        ) -> v:newState

        GetVariable v:userOpts
        SetDictionaryValue key=v:chosen_value.option value=v:newState
        SetName v:opt:"storage.file"
        SaveFile a{
            service="iCloud Drive"
            askwheretosave=false
            destinationpath="\(v:opt:"storage.cfgdir")/"
            overwriteiffileexists=true
        }

        GetVariable v:newState
        If Equals "English"
        Otherwise
            Date
            FormatDate (
                dateFormat="ISO 8601",
                includeISO8601Time=true,
            ) -> mv:no_cache
            URL "\(v:opt.langs_web_dir)/\(v:newState).json?ts=\(mv:no_cache)"
            GetContentsofURL
            SetName "\(v:newState).json"
            SaveFile (
                service="iCloud Drive",
                askWheretoSave=false,
                destinationPath="\(v:opt:"storage.langdir")/",
                overwriteIfFileExists=true
            )
        End
        Nothing
    End
    GetVariable v:value_type
    If Equals "list"

        GetVariable v:chosen_value.list
        GetDictionaryfromInput -> mv:list_options
        GetDictionaryValue get="All Keys"
        RepeatwithEach
            GetVariable mv:list_options
            GetDictionaryValue get="Value" key=v:"Repeat Item" -> mv:item_name

            GetVariable v:"Repeat Item"
            SetName name=mv:item_name
        End
        ChoosefromList (
            prompt="\(mv:chosen_item.caption)",
            selectMultiple=false,
        ) -> v:newState

        GetVariable v:userOpts
        SetDictionaryValue key=v:chosen_value.option value=v:newState
        SetName v:opt:"storage.file"
        SaveFile a{
            service="iCloud Drive"
            askwheretosave=false
            destinationpath="\(v:opt:"storage.cfgdir")/"
            overwriteiffileexists=true
        }
        Nothing

    End
    GetVariable v:value_type
    If Equals "number"

        # Get curret value
        GetVariable v:chosen_value
        GetDictionaryValue get="Value" key="state" -> v:number

        @dbgAlert "number = \(v:number)"

        # ask for a new value
        AskforInput (
            question=mv:chosen_item.caption,
            defaultAnswer="\(v:number)",
            inputType="Number",
        ) -> v:newState

        # Save the new value
        GetVariable v:userOpts
        SetDictionaryValue key=v:chosen_value.option value=v:newState
        SetName v:opt:"storage.file"
        SaveFile a{
            service="iCloud Drive"
            askwheretosave=false
            destinationpath="\(v:opt:"storage.cfgdir")/"
            overwriteiffileexists=true
        }

        Nothing

    End
    GetVariable v:value_type
    If Equals "reset"
        ChooseFromMenu prompt=v:lang.MSG_RESET_WARNING items=[v:lang.MSG_RESET_REMOVE,v:lang.MSG_KEEP_DATA]
        Case #Proceed
            GetFile (
                service="iCloud Drive",
                showDocumentPicker=false,
                filePath="\(v:opt."storage.dir")/",
                errorIfNotFound=false
            )
            RepeatwithEach
                DeleteFiles false
            End
            GetFile (
                service="iCloud Drive",
                showDocumentPicker=false,
                filePath="\(v:userOpts.DownloadFolder)/",
                errorIfNotFound=false
            )
            RepeatwithEach
                DeleteFiles false
            End

            GetFile (
                service="iCloud Drive",
                showDocumentPicker=false,
                filePath="\(v:opt."storage.langdir")/",
                errorIfNotFound=false
            )
            RepeatwithEach
                DeleteFiles false
            End

            Text "{}"
            SetName v:opt:"storage.addons"
            SaveFile a{
                service="iCloud Drive"
                askwheretosave=false
                destinationpath="\(v:opt:"storage.cfgdir")/"
                overwriteiffileexists=true
            }

            GetVariable v:defaultOpts
            SetName v:opt:"storage.file"
            SaveFile a{
                service="iCloud Drive"
                askwheretosave=false
                destinationpath="\(v:opt:"storage.cfgdir")/"
                overwriteiffileexists=true
            }
            @call {fn:showMessage, message:v:lang.MSG_ALL_CONF_CLEAR}

        Case #Stay
            Nothing
        End
        Nothing
    End
    GetVariable v:value_type
    If Equals "exit"
        Nothing
    Otherwise
        @call {fn:showSettings}
    End

    ExitShortcut
End