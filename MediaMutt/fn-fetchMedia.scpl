Comment "..:: fetchMedia ::.."
GetVariable v:function
If Equals "fetchMedia"
  @dbgAlert "Entered fetchMedia\nargs\ntype=\(v:argv:type)\nurl = \(v:argv:url)"

  #ShowAlert "Downloading \(v:argv:type) from \(v:argv:url)."

  Dictionary {
    "DIRECT_MEDIA_URL": "fetchFromDirectLink",
    "YOUTUBE_VIDEO"   : "fetchFromYoutube",
    "INSTAGRAM_POST"  : "fetchFromInstagramPost",
    "GFYCAT_VIDEO"    : "fetchFromGfycat",
    "IMGUR_DIRECT"    : "fetchFromDirectLink",
    "IMGUR_GIFV"      : "fetchFromImgurGifV",
    "IMGUR_POST"      : "fetchFromImgurPost",
    "STREAMABLE_POST" : "fetchFromStreamable",
    "REDDIT_POST"     : "fetchFromRedditPost",
    "TUMBLR_POST"     : "fetchFromTumblr"

  } -> v:url_type_handlers

  GetVariable v:argv:type
  If Contains "EXT_"
    ReplaceText findText="EXT_" replaceWith="" caseSensitive=true regularExpression=false -> v:addon
    @callExt v:addon {fn:fetchMedia, url:v:argv:url}
  Otherwise
    GetVariable v:url_type_handlers
    GetDictionaryValue get="Value" key=v:argv:type -> v:handler
    Count Items
    If Equals 0
      ShowAlert title=v:self message="No handler for this type of url - \(v:argv:type) \(v:argv:url)" showCancelButton=false
      Nothing
      ExitShortcut
    End

    @dbgAlert "type: \(v:argv:type)\nhandler: \(v:handler)"

    @call {fn:v:handler, url:v:argv:url}
  End
  SetVariable v:downloaded_media
  Count Items
  If Equals 0
    Text
    |Type: \(v:argv:type)
    |Url : \(v:argv:url)
    CopytoClipboard
    @call {fn:showMessage, message:"\(v:lang.MSG_NOTHING_DOWNLOADED)"}
    Nothing
  Otherwise

    Comment `Addons can override saving
    and just return "SAVED_BY_ADDON".
    `
    GetVariable v:downloaded_media
    GetType
    If Equals v:lText
      GetVariable v:downloaded_media
      If Equals "SAVED_BY_ADDON"
        //@call {fn:showMessage, message:"Downloaded media was saved by addon."}
        Nothing
        ExitShortcut
      End
      @call {fn:showMessage, message:"Not saved. Unexpected media type."}
      Nothing
      ExitShortcut
    End

    # if test mode, just send back the media
    GetVariable v:opt:TestMode
    If Equals 1
      GetVariable v:downloaded_media
      ExitShortcut
    End

    GetVariable v:userOpts.ViewBeforeSave
    If Equals 1
      GetVariable v:downloaded_media
      Quicklook
    End

    GetVariable v:userOpts
    GetDictionaryValue get="Value" key="SaveTo" -> v:SaveTo
    If Equals "always-ask"
      ChooseFromMenu prompt="Save" items=[
        v:lang.MSG_SAVETO_FILES,
        v:lang.MSG_SAVETO_PHOTOS,
        v:lang.MSG_DISCARD
      ]
      Case
        Text "saveto-files"
      Case
        Text "saveto-photos"
      Case
        Nothing
      End -> v:SaveTo
    End

    GetVariable v:SaveTo
    If Equals "saveto-files"
      Text "\(v:lang.MSG_SAVED_FILE)"
      ReplaceText (
        findText="{FOLDER}",
        replaceWith="\(v:userOpts.DownloadFolder)/",
        caseSensitive=true,
        regularExpression=false
      ) -> mv:msg_saved

      GetVariable v:downloaded_media
      SaveFile a{
          service="iCloud Drive"
          askwheretosave=false
          destinationpath="\(v:userOpts.DownloadFolder)/"
          overwriteiffileexists=false
      }
      GetName -> mv:media_name
      GetVariable v:downloaded_media
      @call {fn:showMessage, message:"\(mv:msg_saved)"}

    End
    GetVariable v:SaveTo
    If Equals "saveto-photos"
        GetVariable v:downloaded_media
        SaveToPhotoAlbum album="All Photos"
        @call {fn:showMessage, message:v:lang.MSG_SAVED_PHOTOS}
    End

  End
  # clear clipboard
  Nothing
  CopytoClipboard localOnly=false
  ExitShortcut

End